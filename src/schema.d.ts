/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/public_power": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Public Power
         * @description Returns the public net electricity production for a given country for each production type. Subtype can be "solarlog" for Switzerland (ch).
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *      ```json
         *     {
         *       "unix_seconds": list[int],
         *       "production_types": [
         *         {
         *             "name": str,
         *             "data": list[float]
         *         }
         *       ],
         *       "deprecated": bool
         *     }
         *     ```
         */
        get: operations["public_power_public_power_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public_power_forecast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Public Power Forecast
         * @description Returns the forecast of the public net electricity production for a given country for each production type.
         *
         *
         *
         *
         *
         *     <b>production_type:</b> Can be solar, wind_onshore, wind_offshore or load
         *         <br><b>forecast_type:</b> Can be current, intraday or day-ahead
         *
         *
         *
         *
         *
         *     If no dates are provided, values for today until forecast is available are returned. For load only the forecast type "day-ahead" is available.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *      ```json
         *     {
         *       "unix_seconds": list[int],
         *       "forecast_values": list[float],
         *       "production_type": str,
         *       "forecast_type": str,
         *       "deprecated": bool
         *     }
         *     ```
         */
        get: operations["public_power_forecast_public_power_forecast_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/total_power": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Total Power
         * @description Returns the total net electricity production (including industrial self supply) for a given country for each production type.
         *
         *
         *
         *
         *
         *     Currently only available for Germany.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *      ```json
         *     {
         *       "unix_seconds": list[int],
         *       "production_types": [
         *         {
         *             "name": str,
         *             "data": list[float]
         *         }
         *       ],
         *       "deprecated": bool
         *     }
         *     ```
         */
        get: operations["total_power_total_power_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/installed_power": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Installed Power
         * @description Returns the installed power for a specified country in GW except for battery storage capacity, which is given in GWh.
         *
         *
         *
         *
         *
         *     <b>time_step:</b> Time step can be either "yearly" or "monthly" (only for Germany)
         *         <br><b>installation_decommission:</b> If true, the net installation / decommission numbers are returned instead of total installed power
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *      ```json
         *     {
         *       "time": list[str],
         *       "production_types": [
         *         {
         *             "name": str,
         *             "data": list[float]
         *         }
         *       ],
         *       "deprecated": bool
         *     }
         *     ```
         */
        get: operations["installed_power_installed_power_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/price": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Day Ahead Price
         * @description Returns the day-ahead spot market price for a specified bidding zone in EUR/MWh.
         *
         *
         *
         *
         *
         *     Available bidding zones (bzn) are shown above.
         *
         *
         *
         *
         *
         *     <b>The data for the following bidding zones is licensed as <a href="https://creativecommons.org/licenses/by/4.0/" target="_blank">CC BY 4.0</a> from Bundesnetzagentur | SMARD.de and is published without changes:
         *         <ul>
         *             <li>AT (Austria)</li>
         *             <li>BE (Belgium)</li>
         *             <li>CH (Switzerland)</li>
         *             <li>CZ (Czech Republic)</li>
         *             <li>DE-LU (Germany, Luxembourg)</li>
         *             <li>DE-AT-LU (Germany, Austria, Luxembourg)</li>
         *             <li>DK1 (Denmark 1)</li>
         *             <li>DK2 (Denmark 2)</li>
         *             <li>FR (France)</li>
         *             <li>HU (Hungary)</li>
         *             <li>IT-North (Italy North)</li>
         *             <li>NL (Netherlands)</li>
         *             <li>NO2 (Norway 2)</li>
         *             <li>PL (Poland)</li>
         *             <li>SE4 (Sweden 4)</li>
         *             <li>SI (Slovenia)
         *         </ul></b>
         *
         *
         *
         *
         *
         *     <b>The data for the other bidding zones is for private and internal use only. The utilization of any data</li>
         *     whether in its raw or derived form, for external or commercial purposes is expressly prohibited. Should you require licensing for market-related data, please direct your inquiries to the original data providers, including but not limited to EPEX SPOT SE.</b>
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "license_info": str,
         *         "unix_seconds": [int],
         *         "price": [float],
         *         "unit": str,
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["day_ahead_price_price_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cbet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cross Border Electricity Trading
         * @description Returns the cross-border electricity trading (cbet) in GW between a specified country and its neighbors.
         *
         *
         *     Positive values indicate an import of electricity, whereas negative values show electricity exports.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "unix_seconds": [int],
         *         "countries": [
         *             {
         *             "name": str,
         *             "data": [float]
         *             }
         *         ],
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["cross_border_electricity_trading_cbet_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cbpf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cross Border Physical Flows
         * @description Returns the cross-border physical flows (cbpfs) of electricity in GW between a specified country and its neighbors.
         *
         *
         *     Positive values indicate an import of electricity, whereas negative values show electricity exports.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "unix_seconds": [int],
         *         "countries": [
         *             {
         *             "name": str,
         *             "data": [float]
         *             }
         *         ],
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["cross_border_physical_flows_cbpf_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/signal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Traffic Signal
         * @description <b>Electricity traffic signal</b>
         *
         *
         *
         *
         *
         *     Returns the renewable share of load in percent from today until prediction is currently available and the corresponding traffic light.
         *
         *
         *
         *
         *
         *     The traffic light "signal" is indicated by the following numbers:
         *
         *
         *
         *         -1: Red (grid congestion),
         *         0: Red (low renewable share),
         *         1: Yellow (average renewable share),
         *         2: Green (high renewable share)
         *
         *
         *
         *
         *
         *     If no data is available from the primary data providers, a best guess is made from historic data. This is indicated by "substitute" set to True.
         *
         *
         *
         *
         *
         *     "postal_code" is an optional input parameter, which will consider the local grid state (e.g. transmission line overload) in future implementations.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "unix_seconds": [int],
         *         "share": [float],
         *         "signal": [int],
         *         "substitute": bool,
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["traffic_signal_signal_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ren_share_forecast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Renewable Share Forecast
         * @description <b>Renewable share forecast</b>
         *
         *
         *
         *
         *
         *     Returns the renewable share of load forecast in percent from today until prediction is currently available. It also includes the forecast for solar, wind on- and offshore share of load.
         *
         *
         *
         *
         *
         *     If no data is available from the primary data providers, a best guess is made from historic data. This is indicated by "substitute" set to True.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "unix_seconds": [int],
         *         "ren_share": [float],
         *         "solar_share": [float],
         *         "wind_onshore_share": [float],
         *         "wind_offshore_share": [float],
         *         "substitute": bool,
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["renewable_share_forecast_ren_share_forecast_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ren_share_daily_avg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ren Share Daily Avg
         * @description <b>Average daily renewable share of load</b>
         *
         *
         *
         *
         *
         *     Returns the average daily renewable share of load of the last 365 days (year = -1) or for a given year if provided.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *
         *         {
         *             "days": ["dd.mm.yyyy"],
         *             "data": [float],
         *             "deprecated": bool
         *         }
         *
         *         ```
         */
        get: operations["ren_share_daily_avg_ren_share_daily_avg_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/solar_share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Solar Share
         * @description <b>Solar Share of Load</b>
         *
         *
         *
         *
         *
         *     Returns the solar share of load from today until prediction is currently available
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "unix_seconds": list[int],
         *         "data": list[float],
         *         "forecast": list[float],
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["solar_share_solar_share_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/solar_share_daily_avg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Solar Share Daily Avg
         * @description <b>Average daily solar share of load</b>
         *
         *
         *
         *
         *
         *     Returns the average daily solar share of load of the last 365 days (year = -1) or for a given year if provided.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "days": ["dd.mm.yyyy"],
         *         "data": [float],
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["solar_share_daily_avg_solar_share_daily_avg_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wind_onshore_share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Wind Onshore Share
         * @description <b>Wind Onshore Share of Load</b>
         *
         *
         *
         *
         *
         *     Returns the wind onshore share of load from today until prediction is currently available
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "unix_seconds": list[int],
         *         "data": list[float],
         *         "forecast": list[float],
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["wind_onshore_share_wind_onshore_share_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wind_onshore_share_daily_avg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Wind Onshore Share Daily Avg
         * @description <b>Average daily wind onshore share of load</b>
         *
         *
         *
         *
         *
         *     Returns the average daily wind onshore share of load of the last 365 days
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "days": ["dd.mm.yyyy"],
         *         "data": [float],
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["wind_onshore_share_daily_avg_wind_onshore_share_daily_avg_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wind_offshore_share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Wind Offshore Share
         * @description <b>Wind Offshore Share of Load</b>
         *
         *
         *
         *
         *
         *     Returns the wind offshore share of load from today until prediction is currently available
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *     {
         *         "unix_seconds": list[int],
         *         "data": list[float],
         *         "forecast": list[float],
         *         "deprecated": bool
         *     }
         *     ```
         */
        get: operations["wind_offshore_share_wind_offshore_share_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wind_offshore_share_daily_avg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Wind Offshore Share Daily Avg
         * @description <b>Average daily wind offshore share of load</b>
         *
         *
         *
         *
         *
         *     Returns the average daily wind offshore share of load of the last 365 days
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *     ```json
         *
         *     {
         *         "days": ["dd.mm.yyyy"],
         *         "data": [float],
         *         "deprecated": bool
         *     }
         *
         *     ```
         */
        get: operations["wind_offshore_share_daily_avg_wind_offshore_share_daily_avg_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/frequency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Frequency
         * @description Returns the frequency measured at Fraunhofer ISE in Freiburg, Germany. Currently only the frequency in RG Continental Europe (formerly UCTE) is available. The data is available in 1 second timesteps from 1st of May 2022 onwards.
         *
         *
         *
         *
         *
         *     Response schema:
         *
         *
         *      ```json
         *     {
         *       "unix_seconds": list[int],
         *       "data": list[float],
         *       "deprecated": bool
         *     }
         *     ```
         */
        get: operations["frequency_frequency_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** CrossBorderModel */
        CrossBorderModel: {
            /** Unix Seconds */
            unix_seconds?: number[] | null;
            /** Countries */
            countries?: components["schemas"]["NamedData"][] | null;
            /** Deprecated */
            deprecated: boolean;
        };
        /** DailyAvgDict */
        DailyAvgDict: {
            /**
             * Days
             * @description List of days in the format dd.mm.yyyy
             */
            days: string[];
            /**
             * Data
             * @description List of average daily values
             */
            data: (number | null)[];
            /** Deprecated */
            deprecated: boolean;
        };
        /** FrequencyModel */
        FrequencyModel: {
            /** Unix Seconds */
            unix_seconds?: number[] | null;
            /** Data */
            data: (number | null)[];
            /** Deprecated */
            deprecated: boolean;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InstalledModel */
        InstalledModel: {
            /** Time */
            time: string[];
            /** Production Types */
            production_types?: components["schemas"]["NamedData"][] | null;
            /** Deprecated */
            deprecated: boolean;
        };
        /** NamedData */
        NamedData: {
            /** Name */
            name: string;
            /** Data */
            data: (number | null)[];
        };
        /** PriceModel */
        PriceModel: {
            /** License Info */
            license_info: string;
            /** Unix Seconds */
            unix_seconds?: number[] | null;
            /** Price */
            price?: (number | null)[] | null;
            /** Unit */
            unit: string;
            /** Deprecated */
            deprecated: boolean;
        };
        /** ProductionModel */
        ProductionModel: {
            /** Unix Seconds */
            unix_seconds?: number[] | null;
            /** Production Types */
            production_types?: components["schemas"]["NamedData"][] | null;
            /** Deprecated */
            deprecated: boolean;
        };
        /** PublicPowerForecastModel */
        PublicPowerForecastModel: {
            /** Unix Seconds */
            unix_seconds: number[];
            /** Forecast Values */
            forecast_values: (number | null)[];
            /** Production Type */
            production_type: string;
            /** Forecast Type */
            forecast_type: string;
            /** Deprecated */
            deprecated: boolean;
        };
        /** RenShareModel */
        RenShareModel: {
            /** Unix Seconds */
            unix_seconds: number[];
            /** Ren Share */
            ren_share: (number | null)[];
            /** Solar Share */
            solar_share?: number[] | null;
            /** Wind Onshore Share */
            wind_onshore_share?: number[] | null;
            /** Wind Offshore Share */
            wind_offshore_share?: number[] | null;
            /** Substitute */
            substitute: boolean;
            /** Deprecated */
            deprecated: boolean;
        };
        /** ShareModel */
        ShareModel: {
            /** Unix Seconds */
            unix_seconds?: number[] | null;
            /** Data */
            data?: (number | null)[] | null;
            /** Forecast */
            forecast?: (number | null)[] | null;
            /** Deprecated */
            deprecated: boolean;
        };
        /** TrafficModel */
        TrafficModel: {
            /** Unix Seconds */
            unix_seconds: number[];
            /** Share */
            share: (number | null)[];
            /**
             * Signal
             * @description
             *         0: Red (low renewable share)
             *         1: Yellow (average renewable share)
             *         2: Green (high renewable share)
             *
             */
            signal?: (number | null)[];
            /** Substitute */
            substitute: boolean;
            /** Deprecated */
            deprecated: boolean;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    public_power_public_power_get: {
        parameters: {
            query?: {
                country?: string;
                start?: string;
                end?: string;
                subtype?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductionModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    public_power_forecast_public_power_forecast_get: {
        parameters: {
            query?: {
                country?: string;
                production_type?: string;
                forecast_type?: string;
                start?: string;
                end?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicPowerForecastModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    total_power_total_power_get: {
        parameters: {
            query?: {
                country?: string;
                start?: string;
                end?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductionModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    installed_power_installed_power_get: {
        parameters: {
            query?: {
                country?: string;
                time_step?: string;
                installation_decommission?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstalledModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    day_ahead_price_price_get: {
        parameters: {
            query?: {
                bzn?: string;
                start?: string;
                end?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PriceModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cross_border_electricity_trading_cbet_get: {
        parameters: {
            query?: {
                country?: string;
                start?: string;
                end?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrossBorderModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cross_border_physical_flows_cbpf_get: {
        parameters: {
            query?: {
                country?: string;
                start?: string;
                end?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrossBorderModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    traffic_signal_signal_get: {
        parameters: {
            query?: {
                country?: string;
                postal_code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrafficModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renewable_share_forecast_ren_share_forecast_get: {
        parameters: {
            query?: {
                country?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RenShareModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ren_share_daily_avg_ren_share_daily_avg_get: {
        parameters: {
            query?: {
                country?: string;
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyAvgDict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    solar_share_solar_share_get: {
        parameters: {
            query?: {
                country?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    solar_share_daily_avg_solar_share_daily_avg_get: {
        parameters: {
            query?: {
                country?: string;
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyAvgDict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wind_onshore_share_wind_onshore_share_get: {
        parameters: {
            query?: {
                country?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wind_onshore_share_daily_avg_wind_onshore_share_daily_avg_get: {
        parameters: {
            query?: {
                country?: string;
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyAvgDict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wind_offshore_share_wind_offshore_share_get: {
        parameters: {
            query?: {
                country?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    wind_offshore_share_daily_avg_wind_offshore_share_daily_avg_get: {
        parameters: {
            query?: {
                country?: string;
                year?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DailyAvgDict"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    frequency_frequency_get: {
        parameters: {
            query?: {
                region?: string;
                start?: string;
                end?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FrequencyModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
